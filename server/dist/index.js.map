{"version":3,"sources":["index.js"],"names":[],"mappings":";;;;;QAcgB,MAAM,GAAN,MAAM;;;;;;yBAdR,WAAW;;;;qBACP,OAAO;;;;qBACP,OAAO;;;;mBACH,OAAO;;IAAjB,GAAG;;uBACC,YAAY;;;;2BACR,gBAAgB;;;;AAEpC,IAAI,QAAQ,GAAG,wBAAM,eAAe,CAAC;IACjC,OAAO,GAAG,wBAAM,cAAc,CAAC,CAAC;;AAEpC,IAAI,SAAS,GAAG,EAAE,CAAC;;AAEnB,IAAM,OAAO,GAAG,OAAO,CAAC,oBAAoB,CAAC,CAAC,OAAO,CAAC;;AAE/C,SAAS,MAAM,CAAC,MAAM,EAAC;AAC5B,MAAI,OAAO,GAAG,IAAI,OAAO,CAAE,UAAC,OAAO,EAAE,MAAM,EAAK;AAC9C,uBAAM,QAAQ,CAAC;AACb,UAAI,EAAE,qBAAI,IAAI,CAAC,MAAM,CAAC,SAAS,CAAC;AAChC,aAAO,EAAE,yBAAQ,IAAI,CAAC,MAAM,CAAC,SAAS,CAAC;KACxC,EAAE,UAAC,GAAG,EAAE,IAAI,EAAK;AAChB,UAAG,GAAG,EAAE,MAAM,CAAC,GAAG,CAAC,CAAC;AACpB,eAAS,CAAC,IAAI,GAAG,IAAI,CAAC,IAAI,CAAC;AAC3B,eAAS,CAAC,OAAO,GAAG,OAAO,CAAC;AAC5B,eAAS,CAAC,OAAO,GAAG,IAAI,CAAC,OAAO,CAAC;AACjC,SAAG,CAAC,KAAK,CAAC,MAAM,EAAE,SAAS,EAAE,UAAC,GAAG,EAAE,MAAM,EAAK;AAC5C,YAAG,GAAG,EAAE,MAAM,CAAC,GAAG,CAAC,CAAC;AACpB,eAAO,CAAC,MAAM,CAAC,CAAC;OACjB,CAAC,CAAC;KACJ,CAAC,CAAC;GACJ,CAAC,CAAC;AACH,SAAO,OAAO,CAAC;CAChB;;AAED,SAAS,OAAO,CAAC,MAAM,EAAE,SAAS,EAAC;AACjC,SAAO,UAAS,EAAE,EAAC;AACjB,2BAAE,OAAO,CAAC,MAAM,EAAE,UAAC,GAAG,EAAE,IAAI,EAAK;AAC/B,UAAG,GAAG,EAAE,OAAO,EAAE,CAAC,GAAG,CAAC,CAAC;AACvB,UAAI,CAAC,EAAE,CAAC,OAAO,EAAE,UAAA,GAAG,EAAI;AACtB,gBAAQ,CAAC,2BAA2B,CAAC,CAAC;AACtC,gBAAQ,CAAC,GAAG,CAAC,CAAC;AACd,YAAI,CAAC,SAAS,CAAC,EAAC,WAAW,EAAE,KAAK,EAAC,EAAE,UAAC,GAAG,EAAE,IAAI,EAAK;AAClD,cAAG,GAAG,EAAE,OAAO,QAAQ,CAAC,GAAG,CAAC,CAAC;AAC7B,iBAAO,CAAC,2BAA2B,CAAC,CAAC;AACrC,mBAAS,CAAC,IAAI,GAAG,IAAI,CAAC;SACvB,CAAC,CAAC;OACJ,CAAC,CAAC;AACH,aAAO,wCAAqC,MAAM,CAAC,EAAE,QAAI,CAAC;AAC1D,QAAE,CAAC,IAAI,EAAE,IAAI,CAAC,CAAC;KAChB,CAAC,CAAA;GACH,CAAA;CACF","file":"index.js","sourcesContent":["import r from 'rethinkdb';\nimport async from 'async';\nimport debug from 'debug';\nimport * as app  from './app';\nimport rdb from './init/rdb';\nimport githash from './init/githash';\n\nlet logerror = debug('transac:error')\n  , loginfo = debug('transac:info');\n\nlet resources = {};\n    \nconst version = require('../../package.json').version;\n\nexport function create(params){\n  let promise = new Promise( (resolve, reject) => {\n    async.parallel({\n      conn: rdb.init(params.rethinkdb),\n      githash: githash.init(params.rethinkdb)\n    }, (err, init) => {\n      if(err) reject(err);\n      resources.conn = init.conn;\n      resources.version = version;\n      resources.githash = init.githash;\n      app.start(params, resources, (err, server) => {\n        if(err) reject(err);\n        resolve(server);\n      });\n    });\n  });\n  return promise;\n}\n\nfunction initRDB(params, resources){\n  return function(cb){\n    r.connect(params, (err, conn) => {\n      if(err) return cb(err);\n      conn.on('error', err => {\n        logerror(\"Rethinkdb lost connection\");\n        logerror(err);\n        conn.reconnect({noreplyWait: false}, (err, conn) => {\n          if(err) return logerror(err);\n          loginfo(\"Rethinkdb has reconnected\");\n          resources.conn = conn;\n        });\n      });\n      loginfo(`Rethinkdb connected to database '${params.db}'`);\n      cb(null, conn);\n    })\n  }\n}\n"],"sourceRoot":"/home/redpelicans/transacd2/server/src"}